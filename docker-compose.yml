# docker-compose.yml
version: "3.8"

services:
  # app:
  #   build: .
  #   container_name: super_agents
  #   env_file:
  #     - .env
  #   ports:
  #     - "8000:8000" # Map host port 8000 to container port 8000
  #   volumes:
  #     - ./app:/app/app
  #     # If you want to mount the .env file directly (alternative to env_file)
  #     # - ./.env:/app/.env
  #   depends_on:
  #     - mongo # Ensure mongo starts before the app
  #   networks:
  #     - app-network

  mongo:
    image: mongo:latest # Use the official MongoDB image
    container_name: mongo_db
    ports:
      - "27017:27017" # Map host port 27017 to container port 27017
    volumes:
      # Persist MongoDB data using a named volume
      - mongo_data:/data/db
    networks:
      - app-network
    # You can add environment variables for MongoDB authentication here if needed
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: root
    #   MONGO_INITDB_ROOT_PASSWORD: example

  redis:
    image: redis:latest
    container_name: redis_db
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes

  # Milvus Components
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.16
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ./data/milvusdata/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app-network

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "19001:9001"
      - "19000:9000"
    volumes:
      - ./data/milvusdata/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app-network

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.5.4
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ./data/milvusdata/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "19091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongo_data: # Define the named volume for data persistence
  redis_data: # Define volume for Redis data
  milvus_data: # Define volume for Milvus data
  etcd_data: # Define volume for etcd data
  minio_data: # Define volume for MinIO data
